From 5a4aad67a5b142007e1ecd9f9f1e77acaf0b0dfc Mon Sep 17 00:00:00 2001
From: Yaroslav Halchenko <debian@onerussian.com>
Date: Thu, 13 Jan 2011 18:44:55 -0500
Subject: [PATCH 2/2] make classes without () new-style: derive from object

---
 libcstat/lapack_lite/remake/make_lite.py           |    4 ++--
 nipy/algorithms/statistics/regression.py           |    6 +++---
 nipy/core/image/roi.py                             |    2 +-
 nipy/core/reference/tests/test_coordinate_map.py   |    2 +-
 .../core/reference/tests/test_coordinate_system.py |    2 +-
 nipy/fixes/scipy/stats/models/family/links.py      |    2 +-
 nipy/fixes/scipy/stats/models/family/varfuncs.py   |    6 +++---
 nipy/neurospin/eda/dimension_reduction.py          |    2 +-
 nipy/neurospin/glm/glm.py                          |    4 ++--
 nipy/neurospin/graph/graph.py                      |    2 +-
 nipy/neurospin/group/displacement_field.py         |    4 ++--
 nipy/neurospin/group/permutation_test.py           |    2 +-
 .../group/spatial_relaxation_onesample.py          |    2 +-
 13 files changed, 20 insertions(+), 20 deletions(-)

diff --git a/libcstat/lapack_lite/remake/make_lite.py b/libcstat/lapack_lite/remake/make_lite.py
index bd15e67..9c03f0d 100755
--- a/libcstat/lapack_lite/remake/make_lite.py
+++ b/libcstat/lapack_lite/remake/make_lite.py
@@ -36,7 +36,7 @@ extern doublereal dlapy2_(doublereal *x, doublereal *y);
 
 '''
 
-class FortranRoutine:
+class FortranRoutine(object):
     """Wrapper for a Fortran routine in a file.
     """
     type = 'generic'
@@ -65,7 +65,7 @@ class UnknownFortranRoutine(FortranRoutine):
     def dependencies(self):
         return []
 
-class FortranLibrary:
+class FortranLibrary(object):
     """Container for a bunch of Fortran routines.
     """
     def __init__(self, src_dirs):
diff --git a/nipy/algorithms/statistics/regression.py b/nipy/algorithms/statistics/regression.py
index a0658c8..62b3fba 100644
--- a/nipy/algorithms/statistics/regression.py
+++ b/nipy/algorithms/statistics/regression.py
@@ -47,7 +47,7 @@ def output_resid(results):
     """
     return results.resid
 
-class RegressionOutput:
+class RegressionOutput(object):
     """
     A class to output things in GLM passes through arrays of data.
     """
@@ -70,7 +70,7 @@ class RegressionOutput:
         self.img[index] = value
         
 
-class RegressionOutputList:
+class RegressionOutputList(object):
     """
     A class to output more than one thing
     from a GLM pass through arrays of data.
@@ -135,7 +135,7 @@ def output_AR1(results):
     rho = np.add.reduce(resid[0:-1]*resid[1:] / np.add.reduce(resid[1:-1]**2))
     return rho
     
-class AREstimator:
+class AREstimator(object):
     """
     A class that whose instances can estimate
     AR(p) coefficients from residuals
diff --git a/nipy/core/image/roi.py b/nipy/core/image/roi.py
index 04cfb68..afa0971 100644
--- a/nipy/core/image/roi.py
+++ b/nipy/core/image/roi.py
@@ -13,7 +13,7 @@ import gc
 
 import numpy as np
 
-class ROI:
+class ROI(object):
     """
     This is the basic ROI class, which we model as basically
     a function defined on Euclidean space, i.e. R^3. For practical
diff --git a/nipy/core/reference/tests/test_coordinate_map.py b/nipy/core/reference/tests/test_coordinate_map.py
index e77dd5c..d1ab31b 100644
--- a/nipy/core/reference/tests/test_coordinate_map.py
+++ b/nipy/core/reference/tests/test_coordinate_map.py
@@ -23,7 +23,7 @@ from nipy.testing import (assert_true, assert_equal, assert_raises,
                           assert_false, assert_array_equal,
                           assert_almost_equal, parametric)
 
-class empty:
+class empty(object):
     pass
 
 E = empty()
diff --git a/nipy/core/reference/tests/test_coordinate_system.py b/nipy/core/reference/tests/test_coordinate_system.py
index 363f912..0b7ba0d 100644
--- a/nipy/core/reference/tests/test_coordinate_system.py
+++ b/nipy/core/reference/tests/test_coordinate_system.py
@@ -8,7 +8,7 @@ from nipy.core.reference.coordinate_system import (
     product,
     safe_dtype)
 
-class empty:
+class empty(object):
     pass
 
 E = empty()
diff --git a/nipy/fixes/scipy/stats/models/family/links.py b/nipy/fixes/scipy/stats/models/family/links.py
index a2cfcfd..f9e7e7a 100644
--- a/nipy/fixes/scipy/stats/models/family/links.py
+++ b/nipy/fixes/scipy/stats/models/family/links.py
@@ -3,7 +3,7 @@
 import numpy as np
 import scipy.stats
 
-class Link:
+class Link(object):
 
     """
     A generic link function for one-parameter exponential
diff --git a/nipy/fixes/scipy/stats/models/family/varfuncs.py b/nipy/fixes/scipy/stats/models/family/varfuncs.py
index 63a087e..522c552 100644
--- a/nipy/fixes/scipy/stats/models/family/varfuncs.py
+++ b/nipy/fixes/scipy/stats/models/family/varfuncs.py
@@ -4,7 +4,7 @@ __docformat__ = 'restructuredtext'
 
 import numpy as np
 
-class VarianceFunction:
+class VarianceFunction(object):
     """
     Variance function that relates the variance of a random variable
     to its mean. Defaults to 1.
@@ -25,7 +25,7 @@ class VarianceFunction:
 
 constant = VarianceFunction()
 
-class Power:
+class Power(object):
     """
     Power variance function:
 
@@ -52,7 +52,7 @@ class Power:
         """
         return np.power(np.fabs(mu), self.power)
 
-class Binomial:
+class Binomial(object):
     """
     Binomial variance function
 
diff --git a/nipy/neurospin/eda/dimension_reduction.py b/nipy/neurospin/eda/dimension_reduction.py
index d6362b6..2f01225 100644
--- a/nipy/neurospin/eda/dimension_reduction.py
+++ b/nipy/neurospin/eda/dimension_reduction.py
@@ -546,7 +546,7 @@ def LPP(G, X, dim, verbose=0, maxiter=1000):
 # --------------- main classes -------------------------------
 # ------------------------------------------------------------
 
-class NLDR:
+class NLDR(object):
     """
     This is a generic class for non-linear dimension reduction techniques
          (NLDR) the main members are:
diff --git a/nipy/neurospin/glm/glm.py b/nipy/neurospin/glm/glm.py
index a314474..960b7bb 100644
--- a/nipy/neurospin/glm/glm.py
+++ b/nipy/neurospin/glm/glm.py
@@ -13,7 +13,7 @@ DEF_DOFMAX = 1e10
 models = {'spherical':['ols', 'kalman'], 
 	  'ar1':['kalman']}
 
-class glm:
+class glm(object):
     def __init__(self, Y=None, X=None, formula=None, axis=0, 
              model='spherical', method=None, niter=2):
 
@@ -135,7 +135,7 @@ class glm:
                 
 
 
-class contrast:
+class contrast(object):
 
     def __init__(self, dim, type='t', tiny=DEF_TINY, dofmax=DEF_DOFMAX):
         """
diff --git a/nipy/neurospin/graph/graph.py b/nipy/neurospin/graph/graph.py
index fa8d5e2..c46e597 100644
--- a/nipy/neurospin/graph/graph.py
+++ b/nipy/neurospin/graph/graph.py
@@ -24,7 +24,7 @@ Fixme: add graph creation routines that are more practical
        
 """
 
-class Graph:
+class Graph(object):
     """
     This is the basic topological (non-weighted) directed Graph class
     fields:
diff --git a/nipy/neurospin/group/displacement_field.py b/nipy/neurospin/group/displacement_field.py
index 5f8eefb..16897a8 100644
--- a/nipy/neurospin/group/displacement_field.py
+++ b/nipy/neurospin/group/displacement_field.py
@@ -63,7 +63,7 @@ def square_gaussian_filter(input, sigma, output = None, mode = "reflect", cval =
 
 
 
-class displacement_field:
+class displacement_field(object):
     """
     Sampling of multiple vector-valued displacement fields on a 3D-lattice.
     Displacement fields are generated as linear combinations of fixed displacements.
@@ -223,7 +223,7 @@ class displacement_field:
         return U, V, W, I
 
 
-class gaussian_random_field:
+class gaussian_random_field(object):
     def __init__(self, XYZ, sigma, n=1):
         self.XYZ = XYZ
         self.sigma = sigma
diff --git a/nipy/neurospin/group/permutation_test.py b/nipy/neurospin/group/permutation_test.py
index 4b418c0..aeea4da 100644
--- a/nipy/neurospin/group/permutation_test.py
+++ b/nipy/neurospin/group/permutation_test.py
@@ -279,7 +279,7 @@ def peak_XYZ(XYZ, Tvalues, labels, label_values):
 #======================================
 #======================================
 
-class permutation_test:
+class permutation_test(object):
     """
     This generic permutation test class contains the calibration method
     which is common to the derived classes permutation_test_onesample and 
diff --git a/nipy/neurospin/group/spatial_relaxation_onesample.py b/nipy/neurospin/group/spatial_relaxation_onesample.py
index 4a00364..c094913 100644
--- a/nipy/neurospin/group/spatial_relaxation_onesample.py
+++ b/nipy/neurospin/group/spatial_relaxation_onesample.py
@@ -29,7 +29,7 @@ def log_gaussian_pdf(x, m, v):
 #####################################################################################
 # spatial relaxation multivariate statistic class
 
-class multivariate_stat:
+class multivariate_stat(object):
     def __init__(self, data, vardata=None, XYZ=None, std=None, sigma=None, 
                     labels=None, network=None, v_shape=3, v_scale=20, 
                     std_shape=3, std_scale=20, m_mean_rate=1e-3, 
-- 
1.7.2.3

